{"version":3,"sources":["components/Header/Header.tsx","styles/color.ts","components/InfoBox/InfoBox.tsx","components/Map/MapView.tsx","utils.tsx","components/Map/Map.tsx","components/Table/Table.tsx","components/LineGraph/LineGraph.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","countries","setCountryIso2","countryIso2","onCountryChange","e","a","countryCode","target","value","className","FormControl","Select","variant","onChange","MenuItem","map","country","iso2","countryInfo","cases","stroke","fill","recovered","deaths","InfoBox","title","total","onClick","active","casesType","Button","style","borderColor","color","Card","CardContent","Typography","MapView","center","lat","lng","zoom","useMap","setView","TileLayer","url","attribution","formatCartData","data","lastDatePoint","chartData","Object","entries","forEach","date","undefined","numberCases","newDataPoint","x","y","push","casesTypeColors","hex","multiplier","showDataOnMap","Circle","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","autoClose","backgroundImage","flag","numeral","format","prettyPrintStat","stat","Map","MapContainer","attributionControl","closePopupOnClick","Table","slice","sort","b","index","backgroundColor","options","legend","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","parser","yAxes","gridLines","display","ticks","callback","LineGraph","useState","setData","useEffect","isAllWorld","fetch","response","ok","json","timeline","getData","keys","length","datasets","coordinatesEurope","App","setCountries","setCountryInfo","setCenter","setZoom","setCasesType","isCancel","getCountryInfo","getCountriesData","find","c","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48c6dee6.chunk.js","sourcesContent":["import React, { ChangeEvent, FC, useState } from \"react\";\nimport \"./Header.scss\";\nimport { FormControl, MenuItem, Select } from \"@material-ui/core\";\nimport { CountryData } from \"../../types\";\n\ninterface Props {\n  countries: CountryData[];\n  setCountryIso2: (iso2: string) => void;\n  countryIso2: string;\n}\n\nconst Header: FC<Props> = ({ countries, setCountryIso2, countryIso2 }) => {\n  const onCountryChange = async (e: ChangeEvent<{ value: unknown }>) => {\n    const countryCode = e.target.value as string;\n    setCountryIso2(countryCode);\n  };\n\n  return (\n    <div className=\"header\">\n      <h2>COVID-19 TRACKER</h2>\n      <FormControl className=\"app__dropdown\">\n        <Select\n          variant=\"outlined\"\n          value={countryIso2}\n          onChange={onCountryChange}\n        >\n          <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {countries.map(({ country, countryInfo: { iso2 } }) => (\n            <MenuItem key={country} value={iso2}>\n              {country}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default Header;\n","export default {\n  cases: {\n    stroke: \"#CC1034\",\n    fill: \"rgba(264, 12, 47, 0.5)\",\n  },\n  recovered: {\n    stroke: \"#7dd71d\",\n    fill: \"rgba(125, 215, 29, 0.5)\",\n  },\n  deaths: {\n    stroke: \"#500606\",\n    fill: \"rgba(80, 6, 6, 0.4)\",\n  },\n};\n","import React, { FC } from \"react\";\nimport \"./InfoBox.scss\";\nimport { Card, CardContent, Typography, Button } from \"@material-ui/core\";\nimport { CaseType } from \"../../types\";\nimport color from \"../../styles/color\";\n\ninterface Props {\n  title: string;\n  cases: string;\n  total: string;\n  onClick: () => void;\n  active: boolean;\n  casesType: CaseType;\n}\n\nconst InfoBox: FC<Props> = ({\n  title,\n  cases,\n  total,\n  onClick,\n  active,\n  casesType,\n}) => {\n  return (\n    <Button\n      className={`infoBox ${active ? \"infoBox--selected\" : \"\"}`}\n      onClick={onClick}\n      style={{ borderColor: color[casesType].stroke }}\n    >\n      <Card>\n        <CardContent>\n          <Typography color=\"textSecondary\" className=\"infoBox__title\">\n            {title}\n          </Typography>\n          <h2\n            className=\"infoBox__cases\"\n            style={{\n              color:\n                title === \"recovered\"\n                  ? color.recovered.stroke\n                  : title === \"deaths\"\n                  ? color.deaths.stroke\n                  : color.cases.stroke,\n            }}\n          >\n            {cases}\n          </h2>\n          <Typography color=\"textSecondary\" className=\"infoBox__total\">\n            {total} Total\n          </Typography>\n        </CardContent>\n      </Card>\n    </Button>\n  );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\nimport { TileLayer, useMap } from \"react-leaflet\";\nimport { MapCoordinates } from \"../../types\";\n\ninterface Props {\n  center: MapCoordinates;\n  zoom: number;\n}\n\nconst MapView: FC<Props> = ({ center: { lat, lng }, zoom }) => {\n  const map = useMap();\n  map.setView([lat, lng], zoom);\n  return (\n    <TileLayer\n      url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n    />\n  );\n};\n\nexport default MapView;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport { CountryData, DataForChart, ChartData, CaseType } from \"./types\";\n\nexport const sortData = (data: CountryData[]) =>\n  data.slice().sort((a, b) => b.cases - a.cases);\n\nexport const formatCartData = (\n  data: DataForChart,\n  casesType: CaseType = \"cases\"\n) => {\n  const chartData: ChartData = [];\n  let lastDatePoint: number | undefined;\n  Object.entries(data[casesType]).forEach(([date, value]) => {\n    if (lastDatePoint !== undefined) {\n      const numberCases = value - lastDatePoint;\n      const newDataPoint = {\n        x: date,\n        y: numberCases < 0 ? 0 : numberCases,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDatePoint = value;\n  });\n  return chartData;\n};\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 250,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 150,\n  },\n  deaths: {\n    hex: \"#920303\",\n    multiplier: 300,\n  },\n};\n\nexport const showDataOnMap = (data: CountryData[], casesType: CaseType) => {\n  return data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      pathOptions={{\n        color: casesTypeColors[casesType].hex,\n        fillColor: casesTypeColors[casesType].hex,\n      }}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      key={country.country}\n    >\n      <Popup autoClose={true}>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n};\n\nexport const prettyPrintStat = (stat: number) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n","import React, { FC } from \"react\";\nimport \"./Map.scss\";\n\nimport { MapContainer } from \"react-leaflet\";\nimport { CaseType, CountryData, MapCoordinates } from \"../../types\";\nimport MapView from \"./MapView\";\nimport { showDataOnMap } from \"../../utils\";\n\ninterface Props {\n  center: MapCoordinates;\n  zoom: number;\n  countries: CountryData[];\n  casesType: CaseType;\n}\n\nconst Map: FC<Props> = ({ countries, center, zoom, casesType }) => {\n  return (\n    <div className=\"map\">\n      <MapContainer\n        attributionControl={true}\n        center={center}\n        zoom={zoom}\n        closePopupOnClick={true}\n      >\n        <MapView center={center} zoom={zoom} />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n","import React, { FC } from \"react\";\nimport \"./Table.scss\";\n\nimport numeral from \"numeral\";\nimport { CountryData } from \"../../types\";\nimport { sortData } from \"../../utils\";\nimport color from \"../../styles/color\";\n\ninterface Props {\n  countries: CountryData[];\n  countryIso2: string;\n  setCountryIso2: (iso2: string) => void;\n}\n\nconst Table: FC<Props> = ({ countries, setCountryIso2, countryIso2 }) => {\n  return (\n    <div className=\"table\">\n      <table>\n        <tbody>\n          {sortData(countries).map(\n            ({ country, cases, countryInfo: { iso2 } }, index) => (\n              <tr\n                key={country}\n                onClick={() => setCountryIso2(iso2)}\n                style={{\n                  backgroundColor:\n                    countryIso2 === iso2 ? color.recovered.fill : undefined,\n                }}\n              >\n                <td>\n                  <span>{index + 1}</span>\n                  {country}\n                </td>\n                <td>\n                  <strong>{numeral(cases).format(\"0,0\")}</strong>\n                </td>\n              </tr>\n            )\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React, { FC, useEffect, useState } from \"react\";\nimport \"./LineGraph.scss\";\n\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\nimport { formatCartData } from \"../../utils\";\nimport color from \"../../styles/color\";\nimport {\n  CaseType,\n  ChartData,\n  DataForChart,\n  DataForChartCountry,\n} from \"../../types\";\n\nconst options = {\n  legend: false,\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem: any, data: any) {\n        return numeral(tooltipItem.value).format(\"+0.0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          // format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n          parser: \"MM/DD/YY\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          callback: function (value: any) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\ninterface Props {\n  casesType: CaseType;\n  country: string;\n}\n\nconst LineGraph: FC<Props> = ({ casesType, country }) => {\n  const [data, setData] = useState<ChartData>({} as ChartData);\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const isAllWorld = country === \"worldwide\";\n        const response = await fetch(\n          `https://disease.sh/v3/covid-19/historical/${\n            isAllWorld ? \"all\" : country\n          }?lastdays=60`\n        );\n        if (response.ok) {\n          if (isAllWorld) {\n            const data = (await response.json()) as DataForChart;\n            setData(formatCartData(data, casesType));\n          } else {\n            const data = (await response.json()) as DataForChartCountry;\n            setData(formatCartData(data.timeline, casesType));\n          }\n        }\n      } catch (e) {}\n    };\n\n    getData();\n  }, [casesType, country]);\n\n  return (\n    <div className=\"lineGraph\">\n      <h3 className=\"lineGraph__title\">\n        {country} new {casesType}\n      </h3>\n      {Object.keys(data).length > 0 ? (\n        <Line\n          data={{\n            datasets: [\n              {\n                data,\n                backgroundColor: color[casesType].fill,\n                borderColor: color[casesType].stroke,\n              },\n            ],\n          }}\n          options={options}\n        />\n      ) : null}\n    </div>\n  );\n};\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.scss\";\n\nimport { Card, CardContent } from \"@material-ui/core\";\nimport \"leaflet/dist/leaflet.css\";\n\nimport { MapCoordinates, CountryData, CaseType } from \"./types\";\nimport Header from \"./components/Header/Header\";\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport Table from \"./components/Table/Table\";\nimport LineGraph from \"./components/LineGraph/LineGraph\";\nimport { prettyPrintStat } from \"./utils\";\n\nconst coordinatesEurope = {\n  lat: 49,\n  lng: 16,\n};\n\nfunction App() {\n  const [countries, setCountries] = useState<CountryData[]>([]);\n  const [countryInfo, setCountryInfo] = useState<CountryData>(\n    {} as CountryData\n  );\n  const [center, setCenter] = useState<MapCoordinates>(coordinatesEurope);\n  const [zoom, setZoom] = useState(3);\n  const [countryIso2, setCountryIso2] = useState(\"worldwide\");\n  const [casesType, setCasesType] = useState<CaseType>(\"cases\");\n\n  useEffect(() => {\n    const getCountryInfo = async () => {\n      const response = await fetch(\"https://disease.sh/v3/covid-19/all\");\n      if (response.ok) {\n        const data = (await response.json()) as CountryData;\n        setCountryInfo(data);\n      }\n    };\n    let isCancel = false;\n    if (!isCancel) {\n      getCountryInfo();\n    }\n    return () => {\n      isCancel = true;\n    };\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      try {\n        const response = await fetch(\n          \"https://disease.sh/v3/covid-19/countries\"\n        );\n        if (response.ok) {\n          const data = (await response.json()) as CountryData[];\n          setCountries(data);\n        }\n      } catch (e) {}\n    };\n\n    let isCancel = false;\n    if (!isCancel) {\n      getCountriesData();\n    }\n\n    return () => {\n      isCancel = true;\n    };\n  }, [setCountries]);\n\n  useEffect(() => {\n    if (countryIso2 === \"worldwide\") {\n      setCenter(coordinatesEurope);\n      setZoom(3);\n    } else {\n      const country = countries.find((c) => c.countryInfo.iso2 === countryIso2);\n      if (country) {\n        const { lat, long: lng } = country.countryInfo;\n        setCountryInfo(country);\n        setCenter({ lat, lng });\n        setZoom(4);\n      }\n    }\n  }, [countryIso2, setCountryInfo, setCenter, countries]);\n\n  const {\n    todayCases,\n    todayRecovered,\n    todayDeaths,\n    cases,\n    recovered,\n    deaths,\n  } = countryInfo;\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <Header\n          countries={countries}\n          setCountryIso2={setCountryIso2}\n          countryIso2={countryIso2}\n        />\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={() => setCasesType(\"cases\")}\n            title=\"coronavirus cases\"\n            cases={prettyPrintStat(todayCases)}\n            total={prettyPrintStat(cases)}\n            active={casesType === \"cases\"}\n            casesType={casesType}\n          />\n          <InfoBox\n            onClick={() => setCasesType(\"recovered\")}\n            title=\"recovered\"\n            cases={prettyPrintStat(todayRecovered)}\n            total={prettyPrintStat(recovered)}\n            active={casesType === \"recovered\"}\n            casesType={casesType}\n          />\n          <InfoBox\n            onClick={() => setCasesType(\"deaths\")}\n            title=\"deaths\"\n            cases={prettyPrintStat(todayDeaths)}\n            total={prettyPrintStat(deaths)}\n            active={casesType === \"deaths\"}\n            casesType={casesType}\n          />\n        </div>\n        <Map\n          center={center}\n          zoom={zoom}\n          countries={countries}\n          casesType={casesType}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases By Country</h3>\n          <Table\n            countries={countries}\n            setCountryIso2={setCountryIso2}\n            countryIso2={countryIso2}\n          />\n          <LineGraph\n            casesType={casesType}\n            country={countryInfo.country || \"worldwide\"}\n          />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}